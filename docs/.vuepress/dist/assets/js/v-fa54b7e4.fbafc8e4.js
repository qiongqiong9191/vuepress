(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[690],{579:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-fa54b7e4",path:"/frontend/standard/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"类型",slug:"类型",children:[]},{level:2,title:"引用",slug:"引用",children:[]}],filePathRelative:"frontend/standard/README.md",git:{updatedTime:16266164e5,contributors:[{name:"1650243458@qq.com",email:"1650243458@qq.com",commits:1}]}}},647:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(252).uE)('<h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p>1.1 基本类型：你可以直接获取到基本类型的值</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol</li><li>bigint</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n\nbar <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 1, 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>由于 Symbols 和 BigInts 不能被正确的 polyfill。所以不应在不能原生支持这些类型的环境或浏览器中使用他们。</li></ul><p>1.2 复杂类型: 复杂类型赋值是获取到他的引用的值。</p><ul><li>object</li><li>array</li><li>function</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n\nbar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 9, 9</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2><p>2.1 所有的赋值都用 const，避免使用 var。eslint: prefer-const, no-const-assign</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>为什么？因为这个能确保你不会改变你的初始值，重复引用会导致 bug 并且使代码变得难以理解。</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',12),p={render:function(n,s){return e}}}}]);